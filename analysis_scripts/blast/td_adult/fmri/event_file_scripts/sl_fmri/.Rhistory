#           overwrite = F,
#           copy.mode = TRUE,
#           copy.date = TRUE)
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to <- merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_to$event_to_path <- str_remove(event_to$bidsEvent,
"(?<=/func)/sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to <- event_to[which(!is.na(event_to$event_from)),]
event_to$event_from <- as.character(event_to$event_from)
# event_to <- event_to[-which(str_detect(event_to$bidsEvent, "incomplete")),]
file.copy(event_to$event_from, file.path(event_to$event_to_path, basename(event_to$event_from)),
overwrite = T,
copy.mode = TRUE,
copy.date = TRUE)
file.copy("/Volumes/data/projects/blast/data/bids/task-asl_bold.json", "/Volumes/data/projects/blast/data/derivatives/fmriprep/",
overwrite = F,
copy.mode = TRUE,
copy.date = TRUE)
file.copy("/Volumes/data/projects/blast/data/bids/task-vsl_bold.json", "/Volumes/data/projects/blast/data/derivatives/fmriprep/",
overwrite = F,
copy.mode = TRUE,
copy.date = TRUE)
event_to
event_from
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to <- merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_to
bidsBold
event_to <- bidsBold
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_from
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
bidsBold
event_to <- bidsBold
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to
str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to$event_to_short
event_to$bidsEvent
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
bidsBold
bidsBold
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to <- as.character(event_to$bidsEvent)
event_to
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to <- as.character(event_to$bidsEvent)
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to$bidsEvent <- as.character(event_to$bidsEvent)
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to
event_to <- bidsBold
event_to$bidsEvent <- as.character(event_to$bidsEvent)
str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$bidsEvent
str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$bidsEvent
bidsEvent <-
list.files(path = "/Volumes/data/projects/blast/data/bids", pattern = "blast_*", recursive = F, full.names = T)
bidsEvent <- paste0(bidsEvent, "/func")
bidsEvent <- list.files(path = bidsEvent, pattern = "*\\_bold.nii.gz$", recursive = F, full.names = T)
bidsBold <- as.data.frame(bidsEvent)
bidsEvent <- as.data.frame(bidsEvent)
bidsEvent$PartID <- str_extract(bidsEvent$bidsEvent, "(?<=func/sub-blast(c|a))\\S+(?=_task)")
if(length(which(str_detect(bidsEvent$bidsEvent, "blastc"))) > 0) {
bidsEvent[which(str_detect(bidsEvent$bidsEvent, "blastc")), "PartID"] <-
paste0("blast_c_", bidsEvent[which(str_detect(bidsEvent$bidsEvent, "blastc")), "PartID"])
}
if(length(which(str_detect(bidsEvent$bidsEvent, "blasta"))) > 0) {
bidsEvent[which(str_detect(bidsEvent$bidsEvent, "blasta")), "PartID"] <-
paste0("blast_a_", bidsEvent[which(str_detect(bidsEvent$bidsEvent, "blasta")), "PartID"])
}
bidsEvent$task <- str_extract(bidsEvent$bidsEvent, "(?<=task-)\\S+(?=_run)")
bidsEvent$task <- gsub("asl", "auditory", bidsEvent$task)
bidsEvent$task <- gsub("vsl", "visual", bidsEvent$task)
bidsEvent$Run <- str_extract(bidsEvent$bidsEvent, "(?<=_run-0)\\S+(?=_bold)")
if (length(-which(str_detect(bidsEvent$bidsEvent, "incomplete"))) > 0) {
bidsEvent <- bidsEvent[-which(str_detect(bidsEvent$bidsEvent, "incomplete")),]
}
# Manually correct some run numbers. This is working backwards from missingEvent and missingPreprocess generated below. If we eventually find these bids or behavioral runs, will remove these lines below:
# blast_a_057 Run 1 bids is partially completed and should be removed from bids data analyses
bidsEvent <- bidsEvent[-which(bidsEvent$PartID == "blast_a_057" & bidsEvent$task == "auditory" & bidsEvent$Run == 1),]
# blast_a_071 cannot hear Run 1; so run 1 bids is not usable; run 2 and 3 bids correspond to run 3 and 1 event files
bidsEvent <- bidsEvent[-which(bidsEvent$PartID == "blast_a_071" & bidsEvent$task == "auditory" & bidsEvent$Run == 1),]
# blast_a_008 is missing behavioral run 1, so removing run 1 from bids data analyses
bidsEvent <- bidsEvent[-which(bidsEvent$PartID == "blast_a_008" & bidsEvent$task == "auditory" & bidsEvent$Run == 1),]
bidsEvent <-
bidsEvent %>%
arrange(PartID, task, Run) %>%
filter(task == "auditory" | task == "visual") %>%
group_by(PartID, task) %>%
dplyr::summarise(bids_run = toString(Run)) %>%
ungroup()
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to
event_to$bidsEvent <- as.character(event_to$bidsEvent)
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to <- merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_to$event_to_path <- str_remove(event_to$bidsEvent,
"(?<=/func)/sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to <- event_to[which(!is.na(event_to$event_from)),]
event_to$event_from <- as.character(event_to$event_from)
event_to
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to$bidsEvent <- as.character(event_to$bidsEvent)
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to <- merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_to$event_to_path <- str_remove(event_to$bidsEvent,
"(?<=/func)/sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to <- event_to[which(!is.na(event_to$event_from)),]
event_to$event_from <- as.character(event_to$event_from)
# event_to <- event_to[-which(str_detect(event_to$bidsEvent, "incomplete")),]
event_to
library(stringr)
# file.copy("/Users/jojohu/Documents/Qlab/fmri/data/child/clean_event/",
#           "/Volumes/data/projects/blast/data/derivatives/event_files/children_new/",
#           overwrite = F,
#           copy.mode = TRUE,
#           copy.date = TRUE)
event_from <-
list.files("/Volumes/data/projects/blast/data/derivatives/event_files/adults_new",
pattern = "sub-\\S+(vsl|asl)_run-\\S+_events.tsv$", full.names = T)
event_from <- as.data.frame(event_from)
event_from[,"event_from_short"] <- basename(as.character(event_from$event_from))
event_to <- bidsBold
event_to$bidsEvent <- as.character(event_to$bidsEvent)
event_to[,"event_to_short"] <- str_extract(event_to$bidsEvent,
"(?<=/func/)sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to$event_to_short <- str_replace(event_to$event_to_short, "_bold.nii.gz", "_events.tsv")
event_to <- merge(event_to, event_from, by.x = "event_to_short", by.y = "event_from_short", all.x = T)
event_to$event_to_path <- str_remove(event_to$bidsEvent,
"(?<=/func)/sub-\\S+(vsl|asl)_run-\\S+_bold.nii.gz$")
event_to <- event_to[which(!is.na(event_to$event_from)),]
event_to$event_from <- as.character(event_to$event_from)
# event_to <- event_to[-which(str_detect(event_to$bidsEvent, "incomplete")),]
file.copy(event_to$event_from, file.path(event_to$event_to_path, basename(event_to$event_from)),
overwrite = T,
copy.mode = TRUE,
copy.date = TRUE)
file.copy("/Volumes/data/projects/blast/data/bids/task-asl_bold.json", "/Volumes/data/projects/blast/data/derivatives/fmriprep/",
overwrite = F,
copy.mode = TRUE,
copy.date = TRUE)
file.copy("/Volumes/data/projects/blast/data/bids/task-vsl_bold.json", "/Volumes/data/projects/blast/data/derivatives/fmriprep/",
overwrite = F,
copy.mode = TRUE,
copy.date = TRUE)
bidsEvent <-
list.files(path = "/Volumes/data/projects/blast/data/bids", pattern = "blast_*", recursive = F, full.names = T)
bidsEvent <- paste0(bidsEvent, "/func")
bidsEvent <- list.files(path = bidsEvent, pattern = "*\\_events.tsv$", recursive = F, full.names = T)
bidsBold <- bidsEvent
readBidsEve <- function(df) {
file_name <- basename(df)
file <- read.csv(df,  sep ="\t", stringsAsFactors = F, header = T)
if(nrow(file) > 0) {
file[,c("file_name")] <- file_name
file[,c("orig_path")] <- df
}
return(file)
}
bidsEventDF <- lapply(bidsEvent, readBidsEve)
bidsEventDF <- bidsEventDF[lapply(bidsEventDF, nrow)>0]
bidsEventDFL <- do.call(dplyr::bind_rows, bidsEventDF)
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
idsEventDFL %>%
filter(str_detect(file_name, "asl"))
bidsEventDFL %>%
filter(str_detect(file_name, "asl"))
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
filter(str_detect(file_name, "blasta")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
bidsEventDFL
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
filter(str_detect(file_name, "blasta")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
filter(str_detect(file_name, "blasta"))
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
filter(str_detect(file_name, "blasta")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
group_by(file_name) %>%
mutate(block_num = seq(1:n())) %>%
group_by(file_name) %>%
filter(max(block_num) > 12)
# Onset < 0; not sure how to deal with theses
bidsEventDFL %>%
filter(str_detect(file_name, "asl")) %>%
dplyr::select(onset, duration, stimuli, condition, stimcond, file_name, orig_path) %>%
arrange(file_name) %>%
filter(onset < 0)
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read.csv("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
library(jsonlite)
fromJSON("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", flatten=TRUE)
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", flatten=TRUE)
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
fromJSON("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", flatten=TRUE)
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read.table("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", header = F)
readLines("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", header = F)
readLines("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read_json("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t")
read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F)
temp <- read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F)
View(temp)
temp <- readLines("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F)
temp <- readLines("/Users/jojohu/Downloads/blast_a_007_auditory_1.log")
temp
temp %>%
filter(str_detect("New trial"))
temp[1000]
temp[7000]
temp[30013]
temp <- read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F)
temp
temp[300013]
temp[300013,]
temp <- read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F)
temp[300013,]
temp[1000,]
nrow(temp)
temp[30014,]
temp[30018,]
temp[30020,]
temp[30021,]
temp %>%
filter(str_detect(V3, "New trial"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "?<=(index=)[:digit]*"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "?<=(index=)[:digit]"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit]"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*"))
temp <- read.delim("/Users/jojohu/Downloads/blast_a_007_auditory_1.log", sep = "\t", header = F, stringsAsFactors = F)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*"))
library(tidyr)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*"))
library(dplyr)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
tidyr::fill(mini_block, .direction = "down")
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = index) %>%
tidyr::fill(mini_block, .direction = "down")
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = index) %>%
tidyr::fill(sort_order, .direction = "down")
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = index) %>%
tidyr::fill(sort_order, .direction = "up")
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = row_number() - row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = row_number() - row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = row_number() - row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order =  row_number() - which(index == 0))
df <- data.frame(var1 = c(1:5), var2 = c(1,2,3, NA, NA))
df
seq_len(nrow(df))
df$repl <- seq_len(nrow(df))
df
ifelse(is.na(df$var2), df$repl, df$var2)
df$var2 <- ifelse(is.na(df$var2), df$repl, df$var2)
df
df <- data.frame(var1 = c(1:5), var2 = c(1,2,3, NA, NA))
df$repl <- seq_len(nrow(df))
df
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(sort_order = row_number() - row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(temp = row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(test = row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(test = row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(test = row_number() - row_number()[!is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(test = row_number()[!is.na(index == 0)])
row_number(temp)[!is.na(index == 0)]
row_number(temp)[!is.na(temp$index == 0)]
row_number(temp)[which(!is.na(temp$index == 0))]
row_number(temp)
row_number(temp$index)[which(!is.na(temp$index == 0))]
row_number(temp$index)
row_number(temp)[which(!is.na(temp$index == 0))]
row_number(temp)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
mutate(test = row_number())
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(!is.na(index==0))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(is.na(index==0))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(index==0)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(is.na(index==0))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(!is.na(index==0))
temp
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*"))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
# filter(!is.na(index==0))
# mutate(test = row_number())
# mutate(test = row_number()[!is.na(index == 0)])
mutate(sort_order = row_number() - row_number()[index == 0])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
# filter(!is.na(index==0))
# mutate(test = row_number())
# mutate(test = row_number()[!is.na(index == 0)])
mutate(sort_order = row_number() - row_number()[which(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(!is.na(index==0))
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
filter(index==0)
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
# filter(index==0)
# mutate(test = row_number())
# mutate(test = row_number()[!is.na(index == 0)])
mutate(sort_order = row_number() - row_number()[index == 0])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
# filter(index==0)
# mutate(test = row_number())
# mutate(test = row_number()[!is.na(index == 0)])
mutate(sort_order = row_number() - row_number()[is.na(index == 0)])
temp %>%
filter(str_detect(V3, "New trial") | str_detect(V3, "Keypress: 5")) %>%
mutate(index = str_extract(V3, "(?<=index=)[:digit:]*")) %>%
# filter(index==0)
# mutate(test = row_number())
# mutate(test = row_number()[!is.na(index == 0)])
mutate(sort_order = row_number() - row_number()[!is.na(index == 0)])
